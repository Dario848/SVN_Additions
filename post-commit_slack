#! /usr/bin/env perl
 
# POST-COMMIT HOOK
#
# The post-commit hook is invoked after a commit. Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-commit' (for which this file is a template) with the
# following ordered arguments:
#
# [1] REPOS-PATH (the path to this repository)
# [2] REV (the number of the revision just committed)
#
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
#
# Because the commit has already completed and cannot be undone,
# the exit code of the hook program is ignored. The hook program
# can use the 'svnlook' utility to help it examine the
# newly-committed tree.
#
# On a Unix system, the normal procedure is to have 'post-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
#
# Note that 'post-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
#
# On a Windows system, you should name the hook program
# 'post-commit.bat' or 'post-commit.exe',
# but the basic idea is the same.
#
# The hook program typically does not inherit the environment of
# its parent process. For example, a common problem is for the
# PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
#
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# the Subversion repository at
# http://svn.apache.org/repos/asf/subversion/trunk/tools/hook-scripts/ and
# http://svn.apache.org/repos/asf/subversion/trunk/contrib/hook-scripts/
 
#
# An SVN post-commit handler for posting to Slack: setup the channel and get the token
# from your team's services page.
#
# Requires these perl modules:
# HTTP::Request
# LWP::UserAgent
# JSON
 
 
use warnings;
use strict;
 
use HTTP::Request::Common qw(POST);
use HTTP::Status qw(is_client_error);
use LWP::UserAgent;
use JSON;
use File::Basename;
 
#
# Set these information for your team
#
 
 
my $opt_domain = "myteam.slack.com"; # Your team's domain
my $opt_token = "XXXXXXX"; # The token from your SVN services page
 
 
#
# this script gets called by the SVN post-commit handler
# with these args:
#
# [0] path to repo
# [1] revision committed
#
# we need to find out what happened in that revision and then act on it
#
 
 
# Notification Message looks like
#
# Repo: myRepoSvn
# Rev: 214
# Author: dario
# Date: 2014-03-03 18:47:54 +0100 (Mon, 03 Mar 2014)
#
# Details: my commit message
#
# Files:
# A mydir/misubdir/trunk/Doc.pdf
# :-
#
#
 
my $repo = basename($ARGV[0]);
my $files = `/usr/bin/svnlook changed -r $ARGV[1] $ARGV[0]`;
my $date = `/usr/bin/svnlook date -r $ARGV[1] $ARGV[0]`;
my $log = `/usr/bin/svnlook log -r $ARGV[1] $ARGV[0]`;
my $who = `/usr/bin/svnlook author -r $ARGV[1] $ARGV[0]`;
 
chomp $who;
 
 
my $all ="Repo: ".$repo."\nRev: ".$ARGV[1]."\nAuthor: ".$who."\nDate: ".$date."\nDetails: ".$log."\nFiles:\n".$files;
 
my $payload = {
'revision' =>$all,
};
 
my $ua = LWP::UserAgent->new;
$ua->timeout(15);
 
my $req = POST( "https://${opt_domain}/services/hooks/subversion?token=${opt_token}", ['payload' => encode_json($payload)] );
my $s = $req->as_string;
print STDERR "Request:\n$s\n";
 
my $resp = $ua->request($req);
$s = $resp->as_string;
print STDERR;
